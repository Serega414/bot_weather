from dotenv import load_dotenv
import os
import requests
import datetime
from config import tg_bot_token, open_weather_token
from aiogram import Bot, Router, types, Dispatcher, F
from aiogram.types import Message
import asyncio

load_dotenv()
tg_bot_token = os.getenv("TG_BOT_TOKEN")
open_weather_token = os.getenv("OPEN_WEATHER_TOKEN")
# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=tg_bot_token)
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start


@router.message(F.text == "/start")
async def start_command(message: Message):
    await message.answer("Hello motherfucker! –í–æ—Ç —Å–∏—Ç–∏ are you from? –ü–æ–ª—É—á–∏—à—å –ø–æ–≥–æ–¥—É")


@router.message()
async def get_weather(message: Message):
    code_to_emodji = {
        "Clear": "–≤—Å–µ –Ø—Å–Ω–æ —Å –≤–∞–º–∏ ‚òÄÔ∏è",
        "Clouds": "–∫–∞–∫ —Ç–æ –∑–∞–û–±–ª–∞—á–Ω–æ üå•Ô∏è",
        "Rain": "–î–æ–∂–¥—å –∫—É—Ä–≤–∞ üåßÔ∏è",
        "Snow": "–°–Ω–µ–≥–æ–≤–∏—Ç —Å–µ–¥–Ω—è üå®Ô∏è",
        "Mist": "–∑–∞–¢—É–º–∞–Ω–∏–ª–æ üå´Ô∏è"
    }

    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={
                message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()
        # pprint(data)

        city = data["name"]
        cur_weather = data["main"]["temp"]
        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_emodji:
            wd = code_to_emodji[weather_description]
        else:
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∑–∞ —Ö—É@#—è —Ç–≤–æ—Ä–∏—Ç—å—Å—è."
        humidity = data["main"]["humidity"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(
            data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(
            data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(
            data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
            data["sys"]["sunrise"])

        await message.answer(f"***{datetime.datetime.now().strftime('%H:%M %d-%m-%Y')}***\n"
                             f"–ü–æ–≥–æ–¥–∞ —Ç—É—Ç–∞: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {
            cur_weather}C¬∞ {wd}\n"
            f"–í–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–ì—É–±–∞—Ç—ã–π: {wind}–º/—Å\n"
            # f"–í–æ—Å—Ö–æ–¥ –ª–∞–º–ø—ã: {sunrise_timestamp}\n"
            # f"–ó–∞—Ö–æ–¥ –ª–∞–º–ø—ã: {sunset_timestamp}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
            f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∫—É—Ä–≤–∞!"
        )

    except:
        await message.reply("no way Gangsta, start over!")


# –§—É–Ω–∫—Ü–∏—è main –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    print('bot start...')
    dp = Dispatcher()
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
